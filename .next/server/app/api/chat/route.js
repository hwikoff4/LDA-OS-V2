"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2Fhome%2Fproject%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fproject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2Fhome%2Fproject%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fproject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_project_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/chat/route.ts */ \"(rsc)/./app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"/home/project/app/api/chat/route.ts\",\n    nextConfigOutput,\n    userland: _home_project_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGcHJvamVjdCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGaG9tZSUyRnByb2plY3QmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2I7QUFDaEU7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Lz8zOGE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9ob21lL3Byb2plY3QvYXBwL2FwaS9jaGF0L3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jaGF0L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY2hhdFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY2hhdC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9ob21lL3Byb2plY3QvYXBwL2FwaS9jaGF0L3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jaGF0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2Fhome%2Fproject%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fproject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/chat/route.ts":
/*!*******************************!*\
  !*** ./app/api/chat/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   maxDuration: () => (/* binding */ maxDuration)\n/* harmony export */ });\n/* harmony import */ var _lib_gpt_configs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/gpt-configs */ \"(rsc)/./lib/gpt-configs.ts\");\n/* harmony import */ var _lib_supabase_knowledge_search__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase-knowledge-search */ \"(rsc)/./lib/supabase-knowledge-search.ts\");\n\n\n// Allow streaming responses up to 30 seconds\nconst maxDuration = 30;\nasync function POST(req) {\n    try {\n        const { messages, gptId } = await req.json();\n        console.log(`🤖 === CHAT API REQUEST ===`);\n        console.log(`🤖 GPT ID: ${gptId}`);\n        console.log(`🤖 Messages count: ${messages?.length || 0}`);\n        // Check if OpenAI API key is configured\n        if (!process.env.OPENAI_API_KEY) {\n            console.error(\"❌ OpenAI API key not configured\");\n            return new Response(JSON.stringify({\n                error: \"OpenAI API key not configured\"\n            }), {\n                status: 500,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n        // Get GPT configuration\n        const gptConfig = (0,_lib_gpt_configs__WEBPACK_IMPORTED_MODULE_0__.getGPTConfig)(gptId || \"legacy-ai\");\n        if (!gptConfig) {\n            console.error(`❌ GPT configuration not found for: ${gptId}`);\n            return new Response(JSON.stringify({\n                error: \"GPT configuration not found\"\n            }), {\n                status: 404,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n        console.log(`📋 Using GPT config: ${gptConfig.name}`);\n        console.log(`📋 Knowledge base enabled: ${gptConfig.knowledgeBase?.enabled || false}`);\n        // Get the latest user message for knowledge base search\n        const latestUserMessage = messages && Array.isArray(messages) && messages.length > 0 ? messages[messages.length - 1]?.content || \"\" : \"\";\n        console.log(`💬 Latest user message: \"${latestUserMessage}\"`);\n        // Use the system prompt from GPT config\n        let systemPrompt = gptConfig.systemPrompt || \"You are a helpful AI assistant.\";\n        console.log(`📝 Base system prompt length: ${systemPrompt.length} characters`);\n        systemPrompt += \"\\n\\n=== CRITICAL INSTRUCTIONS ===\\n\";\n        systemPrompt += \"1. You MUST ONLY use information from your knowledge base when answering questions about Legacy Decks Academy.\\n\";\n        systemPrompt += \"2. If you do not find relevant information in your knowledge base, you MUST respond with: 'I don't have specific information about that in my knowledge base. Please contact a Legacy Decks Academy representative for accurate information.'\\n\";\n        systemPrompt += \"3. NEVER make assumptions or provide generic information when asked specific questions about Legacy Decks Academy.\\n\";\n        systemPrompt += \"4. NEVER hallucinate or invent information that is not explicitly provided in your knowledge base.\\n\";\n        systemPrompt += \"5. When you use knowledge base information, ALWAYS cite the source document.\\n\";\n        systemPrompt += \"=== END CRITICAL INSTRUCTIONS ===\\n\";\n        let hasRelevantKnowledge = false;\n        // Add knowledge base context using vector search if available\n        if (gptConfig.knowledgeBase?.enabled && latestUserMessage && latestUserMessage.trim().length > 0) {\n            try {\n                console.log(`🔍 === KNOWLEDGE BASE SEARCH STARTING ===`);\n                console.log(`🔍 Searching for: \"${latestUserMessage}\"`);\n                console.log(`🔍 GPT ID: ${gptConfig.id}`);\n                // Search the vector database for relevant content\n                const searchResults = await (0,_lib_supabase_knowledge_search__WEBPACK_IMPORTED_MODULE_1__.searchKnowledgeBaseSupabase)(latestUserMessage, gptConfig.id);\n                console.log(`🔍 Search completed. Results count: ${searchResults?.length || 0}`);\n                if (searchResults && Array.isArray(searchResults) && searchResults.length > 0) {\n                    console.log(`✅ Found ${searchResults.length} relevant knowledge base results`);\n                    // Log details about each result\n                    searchResults.forEach((result, index)=>{\n                        console.log(`📄 Result ${index + 1}:`);\n                        console.log(`   - Source: ${result.metadata?.source || result.source || \"Unknown\"}`);\n                        console.log(`   - Similarity: ${((result.similarity || 0) * 100).toFixed(1)}%`);\n                        console.log(`   - Content preview: \"${result.content?.substring(0, 200)}...\"`);\n                    });\n                    const relevantResults = searchResults.filter((result)=>(result.similarity || 0) >= 20);\n                    if (relevantResults.length > 0) {\n                        console.log(`✅ Found ${relevantResults.length} results above relevance threshold`);\n                        hasRelevantKnowledge = true;\n                        const knowledgeContext = relevantResults.filter((result)=>result && result.content) // Filter out invalid results\n                        .map((result, index)=>`[Knowledge Base Source ${index + 1}: ${result.metadata?.source || result.source || \"Unknown Document\"} - Relevance: ${((result.similarity || 0) * 100).toFixed(1)}%]\\n${result.content}`).join(\"\\n\\n\");\n                        if (knowledgeContext.trim().length > 0) {\n                            systemPrompt += \"\\n\\n=== KNOWLEDGE BASE CONTENT ===\\n\";\n                            systemPrompt += \"The following content is from your verified knowledge base. You MUST use ONLY this information to answer questions about Legacy Decks Academy. Do NOT add any information that is not explicitly stated below.\\n\\n\";\n                            systemPrompt += knowledgeContext;\n                            systemPrompt += \"\\n\\n=== END KNOWLEDGE BASE CONTENT ===\\n\";\n                            systemPrompt += \"\\nIMPORTANT: Base your response EXCLUSIVELY on the knowledge base content above. If the answer is not in the knowledge base content, say so explicitly. Always cite the source document when using knowledge base information.\";\n                            console.log(`📚 Added knowledge base context to system prompt`);\n                            console.log(`📚 Final system prompt length: ${systemPrompt.length} characters`);\n                            console.log(`📚 Knowledge context length: ${knowledgeContext.length} characters`);\n                        }\n                    } else {\n                        console.log(\"⚠️ No results met the relevance threshold (20%)\");\n                    }\n                } else {\n                    console.log(\"ℹ️ No relevant knowledge base content found\");\n                }\n                if (!hasRelevantKnowledge) {\n                    systemPrompt += \"\\n\\n=== NO RELEVANT KNOWLEDGE FOUND ===\\n\";\n                    systemPrompt += \"Your knowledge base search did not return relevant information for this query. You MUST respond with: 'I don't have specific information about that in my knowledge base. Please contact a Legacy Decks Academy representative for accurate information.'\\n\";\n                    systemPrompt += \"Do NOT provide generic or assumed information.\\n\";\n                    systemPrompt += \"=== END ===\\n\";\n                    console.log(\"⚠️ Added 'no knowledge found' instruction to system prompt\");\n                }\n            } catch (error) {\n                console.warn(\"⚠️ Failed to search knowledge base, continuing without it:\", error);\n                systemPrompt += \"\\n\\n=== KNOWLEDGE BASE UNAVAILABLE ===\\n\";\n                systemPrompt += \"Your knowledge base is currently unavailable. For questions about Legacy Decks Academy, you MUST respond with: 'I'm unable to access my knowledge base at the moment. Please contact a Legacy Decks Academy representative for accurate information.'\\n\";\n                systemPrompt += \"=== END ===\\n\";\n            }\n        } else {\n            console.log(`ℹ️ Knowledge base search skipped:`);\n            console.log(`   - Enabled: ${gptConfig.knowledgeBase?.enabled || false}`);\n            console.log(`   - Has message: ${!!latestUserMessage}`);\n            console.log(`   - Message length: ${latestUserMessage?.length || 0}`);\n        }\n        // Validate and prepare messages for OpenAI API\n        const validMessages = Array.isArray(messages) ? messages.filter((msg)=>msg && msg.role && msg.content) : [];\n        if (validMessages.length === 0) {\n            console.error(\"❌ No valid messages provided\");\n            return new Response(JSON.stringify({\n                error: \"No valid messages provided\"\n            }), {\n                status: 400,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n        const openaiMessages = [\n            {\n                role: \"system\",\n                content: systemPrompt\n            },\n            ...validMessages.map((msg)=>({\n                    role: msg.role,\n                    content: msg.content\n                }))\n        ];\n        console.log(`🚀 Calling OpenAI API with ${openaiMessages.length} messages...`);\n        // Call OpenAI API\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${process.env.OPENAI_API_KEY}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-4o\",\n                messages: openaiMessages,\n                temperature: 0.7,\n                max_tokens: 2000,\n                stream: true\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"❌ OpenAI API error:\", response.status, errorText);\n            return new Response(JSON.stringify({\n                error: `OpenAI API error: ${response.status}`\n            }), {\n                status: 500,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n        console.log(\"✅ OpenAI API response received, processing stream...\");\n        // Create a readable stream that processes OpenAI's streaming response\n        const encoder = new TextEncoder();\n        const decoder = new TextDecoder();\n        const readableStream = new ReadableStream({\n            async start (controller) {\n                const reader = response.body?.getReader();\n                if (!reader) {\n                    controller.close();\n                    return;\n                }\n                try {\n                    let buffer = \"\";\n                    while(true){\n                        const { done, value } = await reader.read();\n                        if (done) {\n                            controller.close();\n                            break;\n                        }\n                        buffer += decoder.decode(value, {\n                            stream: true\n                        });\n                        const lines = buffer.split(\"\\n\");\n                        // Keep the last incomplete line in the buffer\n                        buffer = lines.pop() || \"\";\n                        for (const line of lines){\n                            if (line.startsWith(\"data: \")) {\n                                const data = line.slice(6).trim();\n                                if (data === \"[DONE]\") {\n                                    controller.close();\n                                    return;\n                                }\n                                try {\n                                    const parsed = JSON.parse(data);\n                                    const content = parsed.choices?.[0]?.delta?.content;\n                                    if (content) {\n                                        // Send content directly as text chunks\n                                        controller.enqueue(encoder.encode(content));\n                                    }\n                                } catch (e) {\n                                    // Skip invalid JSON\n                                    console.warn(\"⚠️ Failed to parse streaming chunk:\", data);\n                                }\n                            }\n                        }\n                    }\n                } catch (error) {\n                    console.error(\"❌ Stream processing error:\", error);\n                    controller.error(error);\n                }\n            }\n        });\n        return new Response(readableStream, {\n            headers: {\n                \"Content-Type\": \"text/plain; charset=utf-8\",\n                \"Cache-Control\": \"no-cache\",\n                Connection: \"keep-alive\"\n            }\n        });\n    } catch (error) {\n        console.error(\"❌ Chat API error:\", error);\n        return new Response(JSON.stringify({\n            error: \"Failed to process chat request\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }), {\n            status: 500,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/embeddings.ts":
/*!***************************!*\
  !*** ./lib/embeddings.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateSimilarity: () => (/* binding */ calculateSimilarity),\n/* harmony export */   generateEmbedding: () => (/* binding */ generateEmbedding),\n/* harmony export */   generateEmbeddings: () => (/* binding */ generateEmbeddings)\n/* harmony export */ });\n// Generate embeddings using OpenAI's text-embedding-ada-002 model\nasync function generateEmbedding(text) {\n    if (!text || typeof text !== \"string\" || text.trim().length === 0) {\n        console.warn(\"⚠️ Invalid text provided for embedding generation\");\n        return [];\n    }\n    if (!process.env.OPENAI_API_KEY) {\n        console.error(\"❌ OpenAI API key not configured for embedding generation\");\n        throw new Error(\"OpenAI API key not configured\");\n    }\n    try {\n        console.log(`🔢 Generating embedding for text: \"${text.substring(0, 100)}...\"`);\n        // Clean the text\n        const cleanText = text.replace(/\\n+/g, \" \") // Replace multiple newlines with single space\n        .replace(/\\s+/g, \" \") // Replace multiple spaces with single space\n        .trim();\n        if (cleanText.length === 0) {\n            console.warn(\"⚠️ Text is empty after cleaning\");\n            return [];\n        }\n        const response = await fetch(\"https://api.openai.com/v1/embeddings\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${process.env.OPENAI_API_KEY}`\n            },\n            body: JSON.stringify({\n                model: \"text-embedding-ada-002\",\n                input: cleanText\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(`❌ OpenAI Embeddings API error: ${response.status} - ${errorText}`);\n            throw new Error(`OpenAI Embeddings API error: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.data || !data.data[0] || !data.data[0].embedding) {\n            console.error(\"❌ Invalid embedding response from OpenAI\");\n            throw new Error(\"Invalid embedding response\");\n        }\n        const embedding = data.data[0].embedding;\n        console.log(`✅ Generated embedding with ${embedding.length} dimensions`);\n        return embedding;\n    } catch (error) {\n        console.error(\"❌ Error generating embedding:\", error);\n        throw error;\n    }\n}\n// Generate embeddings for multiple texts in batch\nasync function generateEmbeddings(texts) {\n    if (!texts || !Array.isArray(texts) || texts.length === 0) {\n        console.warn(\"⚠️ Invalid texts array provided for batch embedding generation\");\n        return [];\n    }\n    if (!process.env.OPENAI_API_KEY) {\n        console.error(\"❌ OpenAI API key not configured for embedding generation\");\n        throw new Error(\"OpenAI API key not configured\");\n    }\n    try {\n        console.log(`🔢 Generating embeddings for ${texts.length} texts`);\n        // Clean all texts\n        const cleanTexts = texts.map((text)=>text.replace(/\\n+/g, \" \").replace(/\\s+/g, \" \").trim()).filter((text)=>text.length > 0);\n        if (cleanTexts.length === 0) {\n            console.warn(\"⚠️ No valid texts after cleaning\");\n            return [];\n        }\n        const response = await fetch(\"https://api.openai.com/v1/embeddings\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${process.env.OPENAI_API_KEY}`\n            },\n            body: JSON.stringify({\n                model: \"text-embedding-ada-002\",\n                input: cleanTexts\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(`❌ OpenAI Embeddings API error: ${response.status} - ${errorText}`);\n            throw new Error(`OpenAI Embeddings API error: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.data || !Array.isArray(data.data)) {\n            console.error(\"❌ Invalid batch embedding response from OpenAI\");\n            throw new Error(\"Invalid batch embedding response\");\n        }\n        const embeddings = data.data.map((item)=>item.embedding);\n        console.log(`✅ Generated ${embeddings.length} embeddings`);\n        return embeddings;\n    } catch (error) {\n        console.error(\"❌ Error generating batch embeddings:\", error);\n        throw error;\n    }\n}\n// Calculate cosine similarity between two embeddings\nfunction calculateSimilarity(embedding1, embedding2) {\n    if (!embedding1 || !embedding2 || embedding1.length !== embedding2.length) {\n        return 0;\n    }\n    let dotProduct = 0;\n    let norm1 = 0;\n    let norm2 = 0;\n    for(let i = 0; i < embedding1.length; i++){\n        dotProduct += embedding1[i] * embedding2[i];\n        norm1 += embedding1[i] * embedding1[i];\n        norm2 += embedding2[i] * embedding2[i];\n    }\n    if (norm1 === 0 || norm2 === 0) {\n        return 0;\n    }\n    return dotProduct / (Math.sqrt(norm1) * Math.sqrt(norm2));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/embeddings.ts\n");

/***/ }),

/***/ "(rsc)/./lib/gpt-configs.ts":
/*!****************************!*\
  !*** ./lib/gpt-configs.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGPTConfig: () => (/* binding */ createGPTConfig),\n/* harmony export */   defaultGPTConfigs: () => (/* binding */ defaultGPTConfigs),\n/* harmony export */   getGPTConfig: () => (/* binding */ getGPTConfig),\n/* harmony export */   getGPTConfigs: () => (/* binding */ getGPTConfigs),\n/* harmony export */   saveGPTConfigs: () => (/* binding */ saveGPTConfigs)\n/* harmony export */ });\nconst defaultGPTConfigs = [\n    {\n        id: \"legacy-ai\",\n        name: \"Legacy AI\",\n        description: \"Your comprehensive business AI assistant with access to your knowledge base and business processes.\",\n        systemPrompt: `You are Legacy AI, the comprehensive business assistant for Legacy Decks Academy. You have access to a knowledge base containing business documents, processes, and information.\n\nCORE IDENTITY:\n- You are a professional, knowledgeable business consultant\n- You specialize in business strategy, operations, and growth\n- You have deep knowledge of Legacy Decks Academy's business model and processes\n- You provide actionable, practical advice\n\nKNOWLEDGE BASE PRIORITY:\n- ALWAYS search the knowledge base first for relevant information\n- When you find relevant content, prioritize it in your response\n- Reference specific documents or sources when available\n- If no relevant knowledge base content is found, use your general business knowledge\n\nRESPONSE STYLE:\n- Professional yet approachable tone\n- Provide specific, actionable recommendations\n- Use bullet points and clear structure when helpful\n- Ask clarifying questions when needed\n- Reference relevant business frameworks and best practices\n\nCAPABILITIES:\n- Business strategy and planning\n- Operations optimization\n- Marketing and sales guidance\n- Financial analysis and planning\n- Team management and leadership\n- Process improvement\n- Market analysis and competitive intelligence\n\nRemember: You are here to help grow and optimize the business using both the specific knowledge base content and your general business expertise.`,\n        icon: \"MessageSquare\",\n        featured: true,\n        tags: [\n            \"business\",\n            \"strategy\",\n            \"operations\",\n            \"consulting\"\n        ],\n        category: \"AI Tools\",\n        knowledgeBase: {\n            enabled: true,\n            files: [],\n            instructions: \"Search for relevant business documents, processes, and strategic information to provide contextual responses.\"\n        },\n        exampleQuestions: [\n            {\n                title: \"Business Strategy\",\n                question: \"How can I improve my deck building business using EOS principles?\"\n            },\n            {\n                title: \"Operations\",\n                question: \"What's the best way to optimize my deck construction production processes?\"\n            },\n            {\n                title: \"Pricing Strategy\",\n                question: \"How should I price my deck building services to maximize profitability?\"\n            },\n            {\n                title: \"Growth Planning\",\n                question: \"How do I create a 90-day growth roadmap for my deck business?\"\n            },\n            {\n                title: \"Team Management\",\n                question: \"What are the key components of building a strong culture in a deck construction company?\"\n            },\n            {\n                title: \"Financial Planning\",\n                question: \"How do I create an accurate cash flow forecast for my deck building business?\"\n            },\n            {\n                title: \"Leadership\",\n                question: \"What are the essential leadership skills for deck construction business owners?\"\n            },\n            {\n                title: \"Project Management\",\n                question: \"How do I implement effective project tracking for multiple deck builds?\"\n            },\n            {\n                title: \"Customer Service\",\n                question: \"What strategies work best for handling customer objections in deck sales?\"\n            },\n            {\n                title: \"Hiring & HR\",\n                question: \"What's the best process for hiring skilled deck builders and crew members?\"\n            },\n            {\n                title: \"Time Management\",\n                question: \"What's the most effective way to conduct a time audit for my deck business?\"\n            },\n            {\n                title: \"EOS Implementation\",\n                question: \"How do I start implementing EOS in my deck construction business?\"\n            },\n            {\n                title: \"Sales Systems\",\n                question: \"What are the key components of a high-converting deck sales system?\"\n            },\n            {\n                title: \"Core Values\",\n                question: \"How do I define and implement core values in my deck building company?\"\n            },\n            {\n                title: \"Meeting Management\",\n                question: \"What makes an effective L10 meeting for a deck construction team?\"\n            },\n            {\n                title: \"Marketing ROI\",\n                question: \"How do I track and improve marketing ROI for my deck building services?\"\n            }\n        ]\n    },\n    {\n        id: \"vision-execution-planner\",\n        name: \"Vision and Execution Planner\",\n        description: \"Strategic planning AI to help define your company vision and create actionable execution plans.\",\n        systemPrompt: `You are a Vision and Execution Planner AI, specialized in helping deck building business owners create compelling visions and executable strategic plans.\n\nCORE EXPERTISE:\n- Vision statement development\n- 10-year target setting\n- 3-year picture creation\n- 1-year plan development\n- Quarterly rocks planning\n- Strategic goal alignment\n- Execution roadmaps\n\nPLANNING APPROACH:\n- Start with the end in mind (10-year vision)\n- Work backwards to create achievable milestones\n- Ensure alignment between vision and daily execution\n- Create measurable, time-bound objectives\n- Balance ambition with realism\n- Focus on what matters most\n\nDELIVERABLES:\n- Clear, inspiring vision statements\n- Detailed execution plans\n- Quarterly rock recommendations\n- Annual goal frameworks\n- Strategic priority identification\n- Action step breakdowns\n\nHelp business owners bridge the gap between where they are and where they want to be.`,\n        icon: \"Target\",\n        featured: false,\n        tags: [\n            \"strategy\",\n            \"planning\",\n            \"vision\",\n            \"execution\",\n            \"EOS\"\n        ],\n        category: \"Core business\",\n        exampleQuestions: [\n            {\n                title: \"10-Year Vision\",\n                question: \"Help me create a compelling 10-year vision for my deck building company\"\n            },\n            {\n                title: \"3-Year Picture\",\n                question: \"What should my 3-year picture include for a deck construction business?\"\n            },\n            {\n                title: \"Annual Goals\",\n                question: \"How do I set realistic yet ambitious annual goals for my deck business?\"\n            },\n            {\n                title: \"Quarterly Rocks\",\n                question: \"Help me identify the most important quarterly rocks for Q1\"\n            }\n        ]\n    },\n    {\n        id: \"core-values-builder\",\n        name: \"Core Values Builder\",\n        description: \"Define and implement core values that drive your company culture and decision-making.\",\n        systemPrompt: `You are a Core Values Builder AI, specialized in helping deck building companies discover, define, and implement authentic core values.\n\nCORE EXPERTISE:\n- Core values discovery process\n- Values articulation and definition\n- Behavioral examples for each value\n- Hiring for cultural fit\n- Performance reviews aligned with values\n- Values-based decision making\n- Culture reinforcement strategies\n\nVALUES DEVELOPMENT APPROACH:\n- Identify what makes your company unique\n- Define 3-7 core values (not too many)\n- Create clear, memorable value statements\n- Develop specific behavioral examples\n- Ensure values are authentic, not aspirational\n- Make values actionable and measurable\n\nIMPLEMENTATION SUPPORT:\n- Hiring interview questions based on values\n- Performance review frameworks\n- Recognition and reward systems\n- Values integration in daily operations\n- Culture assessment tools\n- Values communication strategies\n\nHelp companies build strong cultures through authentic, lived core values.`,\n        icon: \"Heart\",\n        featured: false,\n        tags: [\n            \"culture\",\n            \"values\",\n            \"hiring\",\n            \"team\",\n            \"EOS\"\n        ],\n        category: \"Core business\",\n        exampleQuestions: [\n            {\n                title: \"Discover Values\",\n                question: \"How do I discover the authentic core values of my deck building company?\"\n            },\n            {\n                title: \"Define Values\",\n                question: \"Help me articulate our core values with clear definitions and examples\"\n            },\n            {\n                title: \"Hire for Fit\",\n                question: \"Create interview questions to assess cultural fit with our core values\"\n            },\n            {\n                title: \"Live the Values\",\n                question: \"How do I ensure our core values are lived daily, not just posted on a wall?\"\n            }\n        ]\n    },\n    {\n        id: \"process-builder\",\n        name: \"Process Builder\",\n        description: \"Document and optimize your business processes for consistency and scalability.\",\n        systemPrompt: `You are a Process Builder AI, specialized in helping deck building companies document, optimize, and systematize their core processes.\n\nCORE EXPERTISE:\n- Process identification and mapping\n- Standard operating procedures (SOPs)\n- Workflow optimization\n- Process documentation\n- Efficiency improvement\n- Quality control systems\n- Scalability planning\n\nPROCESS DEVELOPMENT APPROACH:\n- Identify core processes (typically 5-20)\n- Document current state workflows\n- Identify bottlenecks and inefficiencies\n- Design optimized future state\n- Create step-by-step SOPs\n- Implement training and accountability\n- Continuous improvement cycles\n\nKEY PROCESS AREAS:\n- Sales and estimating process\n- Project management workflow\n- Material ordering and logistics\n- Quality control and inspections\n- Customer communication\n- Crew scheduling and coordination\n- Financial and administrative processes\n\nHelp companies create repeatable, scalable processes that don't depend on any one person.`,\n        icon: \"GitBranch\",\n        featured: false,\n        tags: [\n            \"processes\",\n            \"operations\",\n            \"systems\",\n            \"efficiency\",\n            \"EOS\"\n        ],\n        category: \"Core business\",\n        exampleQuestions: [\n            {\n                title: \"Identify Processes\",\n                question: \"What are the core processes I should document for my deck building business?\"\n            },\n            {\n                title: \"Create SOPs\",\n                question: \"Help me create a standard operating procedure for our deck installation process\"\n            },\n            {\n                title: \"Optimize Workflow\",\n                question: \"How can I optimize our project management workflow for better efficiency?\"\n            },\n            {\n                title: \"Process Training\",\n                question: \"What's the best way to train new crew members on our documented processes?\"\n            }\n        ]\n    },\n    {\n        id: \"accountability-chart-designer\",\n        name: \"Accountability Chart Designer\",\n        description: \"Design clear organizational structures with defined roles and responsibilities.\",\n        systemPrompt: `You are an Accountability Chart Designer AI, specialized in helping deck building companies create clear organizational structures using the EOS Accountability Chart framework.\n\nCORE EXPERTISE:\n- Accountability Chart design (not org charts)\n- Role definition and clarity\n- Seat identification\n- Right person, right seat assessment\n- Reporting structure optimization\n- Growth planning and future seats\n- GWC (Gets it, Wants it, Capacity) evaluation\n\nACCOUNTABILITY CHART PRINCIPLES:\n- Function-based, not person-based\n- Clear roles and responsibilities\n- Five key accountabilities per seat\n- Single point of accountability\n- Scalable structure for growth\n- Eliminates confusion and overlap\n\nKEY SEATS IN DECK BUILDING:\n- Visionary (owner/founder)\n- Integrator (operations leader)\n- Sales/Marketing leader\n- Operations/Production leader\n- Finance/Admin leader\n- Project managers\n- Crew leaders\n\nHelp companies create clarity around who does what and eliminate organizational confusion.`,\n        icon: \"Users\",\n        featured: false,\n        tags: [\n            \"organization\",\n            \"roles\",\n            \"accountability\",\n            \"team\",\n            \"EOS\"\n        ],\n        category: \"Core business\",\n        exampleQuestions: [\n            {\n                title: \"Design Chart\",\n                question: \"Help me design an accountability chart for my 10-person deck building company\"\n            },\n            {\n                title: \"Define Roles\",\n                question: \"What are the five key accountabilities for a Production Manager in deck construction?\"\n            },\n            {\n                title: \"Right Person Right Seat\",\n                question: \"How do I assess if I have the right people in the right seats?\"\n            },\n            {\n                title: \"Plan for Growth\",\n                question: \"What seats should I add as we grow from $2M to $5M in revenue?\"\n            }\n        ]\n    },\n    {\n        id: \"rock-target-planner\",\n        name: \"Rock & Target Planner\",\n        description: \"Set and track your Return on Capital targets and financial goals.\",\n        systemPrompt: `You are a Rock & Target Planner AI, specialized in helping deck building companies set financial targets and measure return on capital.\n`,\n        icon: \"DollarSign\",\n        featured: false,\n        tags: [\n            \"finance\",\n            \"targets\",\n            \"ROC\",\n            \"profitability\",\n            \"planning\"\n        ],\n        category: \"Core business\",\n        exampleQuestions: [\n            {\n                title: \"Calculate ROC\",\n                question: \"How do I calculate Return on Capital for my deck building business?\"\n            },\n            {\n                title: \"Set Targets\",\n                question: \"Help me set realistic revenue and profit targets for next year\"\n            },\n            {\n                title: \"Improve Margins\",\n                question: \"What strategies can improve my gross profit margins on deck projects?\"\n            },\n            {\n                title: \"Investment Decisions\",\n                question: \"Should I invest in new equipment or hire another crew? Analyze the ROC.\"\n            }\n        ]\n    },\n    {\n        id: \"sales-script-builder\",\n        name: \"Sales Script Builder\",\n        description: \"Create effective sales scripts and conversation frameworks for deck consultations.\",\n        systemPrompt: `You are a Sales Script Builder AI, specialized in creating effective, natural-sounding sales scripts for deck building consultations and sales calls.\n\nCORE EXPERTISE:\n- Sales script development\n- Objection handling frameworks\n- Discovery question sequences\n- Value proposition articulation\n- Closing techniques\n- Follow-up sequences\n- Phone and in-person scripts\n\nSCRIPT DEVELOPMENT APPROACH:\n- Understand the sales process stages\n- Create natural, conversational scripts\n- Build in flexibility and personalization\n- Address common objections proactively\n- Include strong opening and closing\n- Incorporate storytelling elements\n- Practice and refinement guidance\n\nKEY SCRIPT TYPES:\n- Initial inquiry phone calls\n- Qualification conversations\n- In-home consultation presentations\n- Proposal delivery scripts\n- Objection handling responses\n- Follow-up call frameworks\n- Referral request scripts\n\nHelp sales teams have confident, consistent, effective conversations that convert leads into customers.`,\n        icon: \"MessageCircle\",\n        featured: false,\n        tags: [\n            \"sales\",\n            \"scripts\",\n            \"communication\",\n            \"closing\",\n            \"leads\"\n        ],\n        category: \"Core business\",\n        exampleQuestions: [\n            {\n                title: \"Initial Call Script\",\n                question: \"Create a script for the first phone call with a deck building lead\"\n            },\n            {\n                title: \"Consultation Script\",\n                question: \"Help me build an in-home consultation presentation script\"\n            },\n            {\n                title: \"Handle Objections\",\n                question: \"What should I say when prospects say 'I need to think about it'?\"\n            },\n            {\n                title: \"Close the Sale\",\n                question: \"Give me effective closing techniques for deck building proposals\"\n            }\n        ]\n    },\n    {\n        id: \"ideal-client-marketing-planner\",\n        name: \"Ideal Client Marketing Content Planner\",\n        description: \"Define your ideal client and create targeted marketing content that attracts them.\",\n        systemPrompt: `You are an Ideal Client Marketing Content Planner AI, specialized in helping deck building companies identify their ideal clients and create marketing content that attracts them.\n\nCORE EXPERTISE:\n- Ideal client profile development\n- Customer avatar creation\n- Targeted messaging strategies\n- Content marketing planning\n- Channel selection and optimization\n- Marketing campaign development\n- Lead magnet creation\n\nIDEAL CLIENT FRAMEWORK:\n- Demographics and psychographics\n- Pain points and desires\n- Decision-making process\n- Budget and project scope\n- Geographic and seasonal factors\n- Communication preferences\n- Values and priorities\n\nCONTENT PLANNING:\n- Content themes and topics\n- Platform-specific strategies\n- Content calendar development\n- Lead generation tactics\n- Nurture sequence planning\n- Case study development\n- Testimonial collection\n\nHelp companies attract more of their best customers through targeted, strategic marketing content.`,\n        icon: \"Target\",\n        featured: false,\n        tags: [\n            \"marketing\",\n            \"ideal client\",\n            \"content\",\n            \"targeting\",\n            \"leads\"\n        ],\n        category: \"Core business\",\n        exampleQuestions: [\n            {\n                title: \"Define Ideal Client\",\n                question: \"Help me create a detailed ideal client profile for my deck building business\"\n            },\n            {\n                title: \"Marketing Messages\",\n                question: \"What marketing messages will resonate with high-end deck clients?\"\n            },\n            {\n                title: \"Content Plan\",\n                question: \"Create a 90-day content marketing plan to attract ideal deck clients\"\n            },\n            {\n                title: \"Lead Magnets\",\n                question: \"What lead magnets would attract qualified deck building prospects?\"\n            }\n        ]\n    },\n    {\n        id: \"hiring-funnel-builder\",\n        name: \"Hiring Funnel Builder\",\n        description: \"Build a systematic hiring process to attract and retain top talent for your deck business.\",\n        systemPrompt: `You are a Hiring Funnel Builder AI, specialized in helping deck building companies create systematic, effective hiring processes.\n\nCORE EXPERTISE:\n- Hiring funnel design\n- Job description creation\n- Candidate sourcing strategies\n- Interview process development\n- Assessment and evaluation tools\n- Onboarding program design\n- Retention strategies\n\nHIRING FUNNEL STAGES:\n- Attraction (job postings, employer brand)\n- Application (screening, initial contact)\n- Assessment (interviews, skills tests)\n- Selection (reference checks, offers)\n- Onboarding (training, integration)\n- Retention (engagement, development)\n\nKEY POSITIONS IN DECK BUILDING:\n- Skilled carpenters and builders\n- Project managers\n- Sales representatives\n- Estimators\n- Laborers and helpers\n- Administrative staff\n- Crew leaders\n\nHelp companies build predictable, repeatable hiring systems that consistently bring in great people.`,\n        icon: \"UserPlus\",\n        featured: false,\n        tags: [\n            \"hiring\",\n            \"recruiting\",\n            \"HR\",\n            \"team building\",\n            \"onboarding\"\n        ],\n        category: \"Core business\",\n        exampleQuestions: [\n            {\n                title: \"Design Hiring Funnel\",\n                question: \"Help me create a hiring funnel for deck builders and carpenters\"\n            },\n            {\n                title: \"Job Descriptions\",\n                question: \"Write a compelling job description for a lead deck carpenter position\"\n            },\n            {\n                title: \"Interview Process\",\n                question: \"What interview questions should I ask to find great deck builders?\"\n            },\n            {\n                title: \"Onboarding Plan\",\n                question: \"Create a 90-day onboarding plan for new deck construction crew members\"\n            }\n        ]\n    },\n    {\n        id: \"production-process-builder\",\n        name: \"Production Process Builder\",\n        description: \"Design and optimize your deck construction production processes for efficiency and quality.\",\n        systemPrompt: `You are a Production Process Builder AI, specialized in helping deck building companies create efficient, high-quality production processes.\n\nCORE EXPERTISE:\n- Production workflow design\n- Quality control systems\n- Material management processes\n- Crew coordination and scheduling\n- Safety protocols and compliance\n- Equipment and tool management\n- Productivity optimization\n\nPRODUCTION PROCESS AREAS:\n- Site preparation and layout\n- Foundation and framing procedures\n- Decking installation methods\n- Railing and finishing processes\n- Quality inspection checkpoints\n- Cleanup and project closeout\n- Warranty and follow-up procedures\n\nOPTIMIZATION APPROACH:\n- Identify current workflow bottlenecks\n- Standardize best practices\n- Eliminate waste and rework\n- Improve crew productivity\n- Enhance quality consistency\n- Reduce material waste\n- Ensure safety compliance\n\nHelp companies build repeatable, efficient production processes that deliver consistent quality.`,\n        icon: \"Hammer\",\n        featured: false,\n        tags: [\n            \"production\",\n            \"processes\",\n            \"construction\",\n            \"efficiency\",\n            \"quality\"\n        ],\n        category: \"Operations and Team\",\n        exampleQuestions: [\n            {\n                title: \"Optimize Workflow\",\n                question: \"How can I optimize our deck installation workflow for faster completion?\"\n            },\n            {\n                title: \"Quality Control\",\n                question: \"Create a quality control checklist for each stage of deck construction\"\n            },\n            {\n                title: \"Material Management\",\n                question: \"What's the best process for managing materials on multiple job sites?\"\n            },\n            {\n                title: \"Safety Protocols\",\n                question: \"Help me develop comprehensive safety protocols for deck construction crews\"\n            }\n        ]\n    },\n    {\n        id: \"sales-process-builder\",\n        name: \"Sales Process Builder\",\n        description: \"Create a systematic sales process from lead to signed contract for deck projects.\",\n        systemPrompt: `You are a Sales Process Builder AI, specialized in helping deck building companies create systematic, repeatable sales processes.\n\nCORE EXPERTISE:\n- Sales process design and mapping\n- Lead qualification systems\n- Consultation and estimating procedures\n- Proposal and presentation methods\n- Follow-up and closing strategies\n- CRM implementation\n- Sales metrics and tracking\n\nSALES PROCESS STAGES:\n- Lead generation and capture\n- Initial contact and qualification\n- Site visit and consultation\n- Measurement and estimating\n- Proposal creation and delivery\n- Follow-up and objection handling\n- Contract signing and deposit\n- Project handoff to production\n\nPROCESS OPTIMIZATION:\n- Reduce time from lead to close\n- Improve conversion rates\n- Standardize pricing and proposals\n- Create consistent customer experience\n- Track and measure performance\n- Identify and fix bottlenecks\n- Scale sales operations\n\nHelp companies create predictable, profitable sales processes that convert more leads into customers.`,\n        icon: \"TrendingUp\",\n        featured: false,\n        tags: [\n            \"sales\",\n            \"process\",\n            \"leads\",\n            \"conversion\",\n            \"CRM\"\n        ],\n        category: \"Operations and Team\",\n        exampleQuestions: [\n            {\n                title: \"Design Sales Process\",\n                question: \"Help me design a complete sales process from lead to signed contract\"\n            },\n            {\n                title: \"Lead Qualification\",\n                question: \"Create a lead qualification system to focus on high-value prospects\"\n            },\n            {\n                title: \"Proposal System\",\n                question: \"What's the best way to create and deliver professional deck proposals?\"\n            },\n            {\n                title: \"Track Performance\",\n                question: \"What sales metrics should I track and how do I improve them?\"\n            }\n        ]\n    },\n    {\n        id: \"employee-handbook-builder\",\n        name: \"Employee Handbook Builder\",\n        description: \"Create a comprehensive employee handbook tailored to your deck building business.\",\n        systemPrompt: `You are an Employee Handbook Builder AI, specialized in helping deck building companies create clear, comprehensive employee handbooks.\n\nCORE EXPERTISE:\n- Employee handbook structure and content\n- Company policies and procedures\n- Legal compliance requirements\n- Benefits and compensation documentation\n- Code of conduct and expectations\n- Safety policies and protocols\n- Disciplinary procedures\n\nHANDBOOK SECTIONS:\n- Welcome and company overview\n- Core values and culture\n- Employment policies (hours, attendance, PTO)\n- Compensation and benefits\n- Code of conduct and expectations\n- Safety policies and procedures\n- Equipment and vehicle policies\n- Disciplinary process\n- Acknowledgment and signatures\n\nCOMPLIANCE CONSIDERATIONS:\n- Federal and state labor laws\n- OSHA safety requirements\n- Equal employment opportunity\n- Harassment and discrimination policies\n- Workers' compensation\n- Drug and alcohol policies\n- At-will employment statements\n\nHelp companies create professional handbooks that set clear expectations and protect the business.`,\n        icon: \"Book\",\n        featured: false,\n        tags: [\n            \"HR\",\n            \"policies\",\n            \"handbook\",\n            \"compliance\",\n            \"employees\"\n        ],\n        category: \"Operations and Team\",\n        exampleQuestions: [\n            {\n                title: \"Create Handbook\",\n                question: \"Help me create a complete employee handbook for my deck building company\"\n            },\n            {\n                title: \"Safety Policies\",\n                question: \"What safety policies should be included in a deck construction handbook?\"\n            },\n            {\n                title: \"PTO Policy\",\n                question: \"Create a fair and clear paid time off policy for construction workers\"\n            },\n            {\n                title: \"Code of Conduct\",\n                question: \"Write a code of conduct section for deck building crew members\"\n            }\n        ]\n    },\n    {\n        id: \"new-employee-onboarding-planner\",\n        name: \"New Employee Onboarding Planner\",\n        description: \"Design an effective onboarding program to integrate new employees successfully.\",\n        systemPrompt: `You are a New Employee Onboarding Planner AI, specialized in helping deck building companies create effective onboarding programs.\n\nCORE EXPERTISE:\n- Onboarding program design\n- Training curriculum development\n- First day/week/month planning\n- Skills assessment and development\n- Cultural integration strategies\n- Mentorship program design\n- Performance milestone tracking\n\nONBOARDING PHASES:\n- Pre-boarding (before first day)\n- First day orientation\n- First week training\n- 30-day integration\n- 60-day skill development\n- 90-day performance review\n- Ongoing development plan\n\nKEY ONBOARDING AREAS:\n- Company culture and values\n- Safety training and certification\n- Tool and equipment training\n- Construction techniques and standards\n- Quality expectations\n- Communication protocols\n- Administrative procedures\n\nHelp companies create onboarding programs that reduce turnover and accelerate new employee productivity.`,\n        icon: \"UserCheck\",\n        featured: false,\n        tags: [\n            \"onboarding\",\n            \"training\",\n            \"new hire\",\n            \"integration\",\n            \"HR\"\n        ],\n        category: \"Operations and Team\",\n        exampleQuestions: [\n            {\n                title: \"Onboarding Program\",\n                question: \"Create a 90-day onboarding program for new deck construction employees\"\n            },\n            {\n                title: \"First Day Plan\",\n                question: \"What should be included in a new employee's first day at a deck company?\"\n            },\n            {\n                title: \"Training Checklist\",\n                question: \"Develop a skills training checklist for new deck builders\"\n            },\n            {\n                title: \"Mentorship Program\",\n                question: \"How do I set up a mentorship program for new crew members?\"\n            }\n        ]\n    },\n    {\n        id: \"subcontractor-onboarding-planner\",\n        name: \"Subcontractor Onboarding Planner\",\n        description: \"Create a systematic process for vetting, onboarding, and managing subcontractors.\",\n        systemPrompt: `You are a Subcontractor Onboarding Planner AI, specialized in helping deck building companies create effective subcontractor management systems.\n\nCORE EXPERTISE:\n- Subcontractor vetting and qualification\n- Onboarding process design\n- Contract and agreement templates\n- Insurance and licensing verification\n- Quality standards communication\n- Payment terms and procedures\n- Performance evaluation systems\n\nSUBCONTRACTOR MANAGEMENT:\n- Initial qualification criteria\n- Reference and background checks\n- Insurance certificate verification\n- Licensing and certification review\n- Contract negotiation and signing\n- Project-specific onboarding\n- Quality and safety expectations\n- Payment schedules and terms\n- Performance tracking and feedback\n\nCOMMON SUBCONTRACTOR TYPES:\n- Electricians (deck lighting)\n- Plumbers (outdoor kitchens)\n- Concrete contractors (footings)\n- Excavation services\n- Roofing contractors (pergolas)\n- Painters and stainers\n- Landscapers\n\nHelp companies build reliable subcontractor networks that deliver quality work consistently.`,\n        icon: \"Briefcase\",\n        featured: false,\n        tags: [\n            \"subcontractors\",\n            \"vendors\",\n            \"onboarding\",\n            \"management\",\n            \"quality\"\n        ],\n        category: \"Operations and Team\",\n        exampleQuestions: [\n            {\n                title: \"Vetting Process\",\n                question: \"Create a vetting process for new subcontractors in deck construction\"\n            },\n            {\n                title: \"Onboarding Checklist\",\n                question: \"What should be included in a subcontractor onboarding checklist?\"\n            },\n            {\n                title: \"Contract Template\",\n                question: \"Help me create a subcontractor agreement template for deck projects\"\n            },\n            {\n                title: \"Quality Standards\",\n                question: \"How do I communicate quality expectations to subcontractors?\"\n            }\n        ]\n    },\n    {\n        id: \"performance-pay-planner\",\n        name: \"Performance Pay Planner\",\n        description: \"Design performance-based compensation systems to motivate and reward your team.\",\n        systemPrompt: `You are a Performance Pay Planner AI, specialized in helping deck building companies create effective performance-based compensation systems.\n\nCORE EXPERTISE:\n- Compensation structure design\n- Performance metrics identification\n- Bonus and incentive programs\n- Commission structures\n- Profit-sharing plans\n- Team vs. individual incentives\n- Fair and motivating pay systems\n\nPERFORMANCE PAY MODELS:\n- Production-based bonuses\n- Quality incentives\n- Safety performance rewards\n- Customer satisfaction bonuses\n- Project completion incentives\n- Sales commissions\n- Profit-sharing programs\n- Skill-based pay increases\n\nKEY CONSIDERATIONS:\n- Align incentives with business goals\n- Make metrics clear and measurable\n- Ensure fairness and transparency\n- Balance individual and team rewards\n- Consider cash flow and profitability\n- Create sustainable long-term systems\n- Motivate without creating negative behaviors\n\nHelp companies design compensation systems that attract, motivate, and retain top performers.`,\n        icon: \"Award\",\n        featured: false,\n        tags: [\n            \"compensation\",\n            \"performance\",\n            \"incentives\",\n            \"bonuses\",\n            \"HR\"\n        ],\n        category: \"Operations and Team\",\n        exampleQuestions: [\n            {\n                title: \"Bonus Structure\",\n                question: \"Design a performance bonus structure for deck construction crews\"\n            },\n            {\n                title: \"Sales Commission\",\n                question: \"What's a fair commission structure for deck sales representatives?\"\n            },\n            {\n                title: \"Quality Incentives\",\n                question: \"How can I incentivize quality work without sacrificing productivity?\"\n            },\n            {\n                title: \"Profit Sharing\",\n                question: \"Should I implement a profit-sharing plan and how would it work?\"\n            }\n        ]\n    },\n    {\n        id: \"social-media-content-planner\",\n        name: \"Social Media Content Planner\",\n        description: \"Plan and create engaging social media content strategies for your deck building business.\",\n        systemPrompt: `You are a Social Media Content Planner AI, specialized in helping deck building companies create engaging, strategic social media content.\n\nCORE EXPERTISE:\n- Social media strategy development\n- Content calendar creation\n- Platform-specific content optimization\n- Engagement and growth strategies\n- Visual content planning\n- Hashtag research and strategy\n- Analytics and performance tracking\n\nPLATFORM EXPERTISE:\n- Instagram (visual showcase, stories, reels)\n- Facebook (community building, ads)\n- LinkedIn (B2B, thought leadership)\n- Pinterest (design inspiration)\n- TikTok (behind-the-scenes, education)\n- YouTube (project showcases, tutorials)\n\nCONTENT TYPES:\n- Before and after transformations\n- Project progress updates\n- Design inspiration and trends\n- Educational tips and how-tos\n- Customer testimonials and reviews\n- Behind-the-scenes crew content\n- Seasonal promotions and offers\n- Company culture and team highlights\n\nSTRATEGY APPROACH:\n- Define target audience and goals\n- Create consistent posting schedule\n- Balance promotional and value content\n- Optimize for each platform's algorithm\n- Engage with followers and community\n- Track metrics and adjust strategy\n- Leverage user-generated content\n\nHelp deck building companies build strong social media presence that generates leads and builds brand authority.`,\n        icon: \"Share2\",\n        featured: false,\n        tags: [\n            \"social media\",\n            \"content\",\n            \"marketing\",\n            \"Instagram\",\n            \"Facebook\"\n        ],\n        category: \"Marketing and Client Experience\",\n        exampleQuestions: [\n            {\n                title: \"Content Calendar\",\n                question: \"Create a 30-day social media content calendar for my deck building business\"\n            },\n            {\n                title: \"Instagram Strategy\",\n                question: \"What's the best Instagram strategy to showcase our deck projects?\"\n            },\n            {\n                title: \"Engagement Tips\",\n                question: \"How can I increase engagement on our deck building social media posts?\"\n            },\n            {\n                title: \"Video Content\",\n                question: \"What types of video content work best for deck construction companies?\"\n            },\n            {\n                title: \"Hashtag Strategy\",\n                question: \"What hashtags should I use to reach potential deck building clients?\"\n            },\n            {\n                title: \"Before & After\",\n                question: \"How do I create compelling before and after posts for deck transformations?\"\n            },\n            {\n                title: \"Story Ideas\",\n                question: \"Give me 10 Instagram story ideas for a deck building company\"\n            },\n            {\n                title: \"Facebook Ads\",\n                question: \"What type of Facebook ad content converts best for deck builders?\"\n            },\n            {\n                title: \"Seasonal Content\",\n                question: \"Plan seasonal social media content for spring deck building season\"\n            },\n            {\n                title: \"User Content\",\n                question: \"How can I encourage customers to share photos of their new decks?\"\n            },\n            {\n                title: \"LinkedIn Strategy\",\n                question: \"Should deck builders be on LinkedIn and what should we post?\"\n            },\n            {\n                title: \"Reels Ideas\",\n                question: \"Give me 15 Instagram Reels ideas for deck construction content\"\n            },\n            {\n                title: \"Community Building\",\n                question: \"How do I build an engaged community around our deck building brand?\"\n            },\n            {\n                title: \"Analytics\",\n                question: \"What social media metrics should I track for my deck business?\"\n            },\n            {\n                title: \"Competitor Analysis\",\n                question: \"How do I analyze competitor social media to improve our strategy?\"\n            },\n            {\n                title: \"Content Mix\",\n                question: \"What's the right mix of promotional vs. educational content?\"\n            }\n        ]\n    },\n    {\n        id: \"website-audit-tool\",\n        name: \"Website Audit Tool\",\n        description: \"Analyze and optimize your deck building website for better performance and conversions.\",\n        systemPrompt: `You are a Website Audit Tool AI, specialized in analyzing and optimizing deck building company websites for performance, SEO, and conversions.\n\nCORE EXPERTISE:\n- Website performance analysis\n- SEO optimization and auditing\n- User experience (UX) evaluation\n- Conversion rate optimization\n- Mobile responsiveness testing\n- Content quality assessment\n- Technical SEO issues\n- Competitor website analysis\n\nAUDIT AREAS:\n- Homepage effectiveness\n- Service pages optimization\n- Portfolio/gallery presentation\n- Contact and lead capture forms\n- Call-to-action placement\n- Page load speed\n- Mobile experience\n- SEO fundamentals (titles, meta, headers)\n- Local SEO optimization\n- Trust signals (reviews, testimonials)\n\nOPTIMIZATION RECOMMENDATIONS:\n- Clear value proposition\n- Strong calls-to-action\n- Easy navigation structure\n- Fast loading times\n- Mobile-first design\n- Local SEO best practices\n- Lead capture optimization\n- Trust and credibility elements\n- Before/after project showcases\n- Clear pricing or consultation offers\n\nHelp deck building companies turn their websites into powerful lead generation machines.`,\n        icon: \"Globe\",\n        featured: false,\n        tags: [\n            \"website\",\n            \"SEO\",\n            \"optimization\",\n            \"conversions\",\n            \"audit\"\n        ],\n        category: \"Marketing and Client Experience\",\n        exampleQuestions: [\n            {\n                title: \"Complete Audit\",\n                question: \"Perform a comprehensive audit of my deck building website\"\n            },\n            {\n                title: \"SEO Analysis\",\n                question: \"What SEO improvements should I make to rank better for deck building searches?\"\n            },\n            {\n                title: \"Homepage Review\",\n                question: \"Review my homepage and suggest improvements for better conversions\"\n            },\n            {\n                title: \"Mobile Experience\",\n                question: \"How can I improve the mobile experience on my deck building website?\"\n            },\n            {\n                title: \"Lead Capture\",\n                question: \"Optimize my contact forms and lead capture strategy\"\n            },\n            {\n                title: \"Portfolio Page\",\n                question: \"How should I structure my deck project portfolio page?\"\n            },\n            {\n                title: \"Local SEO\",\n                question: \"What local SEO tactics will help me rank in my service area?\"\n            },\n            {\n                title: \"Page Speed\",\n                question: \"My website loads slowly - what can I do to speed it up?\"\n            },\n            {\n                title: \"Trust Signals\",\n                question: \"What trust signals should I add to increase credibility?\"\n            },\n            {\n                title: \"Call-to-Action\",\n                question: \"Where should I place CTAs on my deck building website?\"\n            },\n            {\n                title: \"Service Pages\",\n                question: \"How do I optimize my service pages for better conversions?\"\n            },\n            {\n                title: \"Competitor Analysis\",\n                question: \"Analyze competitor websites and identify opportunities\"\n            },\n            {\n                title: \"Content Strategy\",\n                question: \"What content should I add to my website to attract more leads?\"\n            },\n            {\n                title: \"Navigation\",\n                question: \"Is my website navigation intuitive for potential deck clients?\"\n            },\n            {\n                title: \"Testimonials\",\n                question: \"How should I display customer testimonials for maximum impact?\"\n            },\n            {\n                title: \"Conversion Rate\",\n                question: \"My website gets traffic but few leads - what's wrong?\"\n            }\n        ]\n    },\n    {\n        id: \"email-campaign-builder\",\n        name: \"Email Campaign Builder\",\n        description: \"Create effective email marketing campaigns to nurture leads and engage customers.\",\n        systemPrompt: `You are an Email Campaign Builder AI, specialized in helping deck building companies create effective email marketing campaigns.\n\nCORE EXPERTISE:\n- Email campaign strategy\n- Email sequence development\n- Subject line optimization\n- Email copywriting\n- Segmentation strategies\n- Automation workflows\n- A/B testing recommendations\n- Email design best practices\n\nCAMPAIGN TYPES:\n- Lead nurture sequences\n- Seasonal promotions\n- Newsletter campaigns\n- Post-project follow-ups\n- Referral request emails\n- Abandoned estimate follow-ups\n- Educational content series\n- Customer reactivation campaigns\n\nEMAIL SEQUENCE EXAMPLES:\n- New lead welcome series\n- Estimate follow-up sequence\n- Post-installation satisfaction series\n- Annual maintenance reminders\n- Referral request campaigns\n- Seasonal promotion announcements\n- Educational deck care tips\n- Customer loyalty programs\n\nBEST PRACTICES:\n- Compelling subject lines\n- Clear, scannable content\n- Strong calls-to-action\n- Mobile-optimized design\n- Personalization and segmentation\n- Timing and frequency optimization\n- Compliance with email regulations\n- Performance tracking and optimization\n\nHelp deck building companies build relationships and generate revenue through strategic email marketing.`,\n        icon: \"Mail\",\n        featured: false,\n        tags: [\n            \"email\",\n            \"marketing\",\n            \"campaigns\",\n            \"nurture\",\n            \"automation\"\n        ],\n        category: \"Marketing and Client Experience\",\n        exampleQuestions: [\n            {\n                title: \"Lead Nurture\",\n                question: \"Create a lead nurture email sequence for deck building prospects\"\n            },\n            {\n                title: \"Welcome Series\",\n                question: \"Write a welcome email series for new leads who request information\"\n            },\n            {\n                title: \"Follow-Up Sequence\",\n                question: \"Design a follow-up sequence after sending a deck building estimate\"\n            },\n            {\n                title: \"Newsletter Content\",\n                question: \"What should I include in a monthly newsletter for deck clients?\"\n            },\n            {\n                title: \"Subject Lines\",\n                question: \"Write 20 compelling subject lines for deck building email campaigns\"\n            },\n            {\n                title: \"Seasonal Campaign\",\n                question: \"Create a spring deck building promotion email campaign\"\n            },\n            {\n                title: \"Referral Request\",\n                question: \"Write an email asking satisfied customers for referrals\"\n            },\n            {\n                title: \"Abandoned Estimate\",\n                question: \"Create a sequence for prospects who received estimates but didn't respond\"\n            },\n            {\n                title: \"Post-Project\",\n                question: \"Design a post-installation email sequence for new deck owners\"\n            },\n            {\n                title: \"Maintenance Reminders\",\n                question: \"Create annual deck maintenance reminder emails\"\n            },\n            {\n                title: \"Educational Series\",\n                question: \"Develop an educational email series about deck design and materials\"\n            },\n            {\n                title: \"Reactivation\",\n                question: \"Write emails to re-engage old leads who never converted\"\n            },\n            {\n                title: \"Segmentation\",\n                question: \"How should I segment my email list for a deck building business?\"\n            },\n            {\n                title: \"Automation\",\n                question: \"What email automations should every deck builder have set up?\"\n            },\n            {\n                title: \"A/B Testing\",\n                question: \"What elements should I A/B test in my deck building emails?\"\n            },\n            {\n                title: \"Email Design\",\n                question: \"What's the best email template design for deck building campaigns?\"\n            }\n        ]\n    },\n    {\n        id: \"quarterly-reset-planner\",\n        name: \"Quarterly Reset Planner\",\n        description: \"Plan and execute effective quarterly business reviews and goal-setting sessions.\",\n        systemPrompt: `You are a Quarterly Reset Planner AI, specialized in helping deck building companies conduct effective quarterly planning and review sessions.\n\nCORE EXPERTISE:\n- Quarterly planning frameworks\n- Goal setting and tracking\n- Performance review processes\n- Strategic priority identification\n- Team alignment strategies\n- Quarterly rocks planning (EOS)\n- Retrospective facilitation\n- Action plan development\n\nQUARTERLY RESET PROCESS:\n- Review previous quarter performance\n- Celebrate wins and learn from losses\n- Analyze key metrics and trends\n- Identify obstacles and challenges\n- Set priorities for next quarter\n- Define quarterly rocks/goals\n- Create action plans and accountability\n- Align team around priorities\n\nKEY REVIEW AREAS:\n- Revenue and profitability\n- Sales and marketing performance\n- Production and operations efficiency\n- Team performance and culture\n- Customer satisfaction\n- Strategic initiatives progress\n- Market conditions and opportunities\n- Systems and process improvements\n\nPLANNING OUTPUTS:\n- Quarterly goals and rocks\n- Key performance indicators\n- Action plans with owners\n- Meeting and review schedules\n- Resource allocation plans\n- Risk mitigation strategies\n- Communication and alignment plans\n\nHelp deck building companies maintain momentum and achieve their annual goals through effective quarterly planning.`,\n        icon: \"Calendar\",\n        featured: false,\n        tags: [\n            \"planning\",\n            \"quarterly\",\n            \"goals\",\n            \"review\",\n            \"strategy\",\n            \"EOS\"\n        ],\n        category: \"Marketing and Client Experience\",\n        exampleQuestions: [\n            {\n                title: \"Quarterly Review\",\n                question: \"Guide me through conducting a quarterly business review for my deck company\"\n            },\n            {\n                title: \"Set Quarterly Rocks\",\n                question: \"Help me identify and set quarterly rocks for Q2\"\n            },\n            {\n                title: \"Performance Analysis\",\n                question: \"What metrics should I review in my quarterly planning session?\"\n            },\n            {\n                title: \"Team Alignment\",\n                question: \"How do I get my team aligned around quarterly priorities?\"\n            },\n            {\n                title: \"Goal Setting\",\n                question: \"Create a framework for setting achievable quarterly goals\"\n            },\n            {\n                title: \"Action Plans\",\n                question: \"Turn our quarterly rocks into detailed action plans\"\n            },\n            {\n                title: \"Retrospective\",\n                question: \"Facilitate a quarterly retrospective to learn from last quarter\"\n            },\n            {\n                title: \"Marketing Plan\",\n                question: \"Develop a quarterly marketing plan for the spring deck season\"\n            },\n            {\n                title: \"Sales Goals\",\n                question: \"Set realistic quarterly sales goals for our deck building business\"\n            },\n            {\n                title: \"Operations Review\",\n                question: \"What operational improvements should we prioritize this quarter?\"\n            },\n            {\n                title: \"Financial Planning\",\n                question: \"Create a quarterly financial plan and cash flow projection\"\n            },\n            {\n                title: \"Team Meeting\",\n                question: \"Design an agenda for our quarterly planning meeting\"\n            },\n            {\n                title: \"Accountability\",\n                question: \"How do I create accountability for quarterly goals?\"\n            },\n            {\n                title: \"Track Progress\",\n                question: \"What's the best way to track progress on quarterly rocks?\"\n            },\n            {\n                title: \"Adjust Strategy\",\n                question: \"When should I adjust quarterly plans vs. staying the course?\"\n            },\n            {\n                title: \"Celebrate Wins\",\n                question: \"How do I celebrate quarterly wins with my team effectively?\"\n            }\n        ]\n    }\n];\nfunction getGPTConfigs() {\n    if (true) {\n        return defaultGPTConfigs;\n    }\n    const stored = localStorage.getItem(\"gpt-configs\");\n    if (stored) {\n        try {\n            const parsed = JSON.parse(stored);\n            // Merge with defaults to ensure all default GPTs exist\n            const merged = [\n                ...defaultGPTConfigs\n            ];\n            parsed.forEach((config)=>{\n                const existingIndex = merged.findIndex((c)=>c.id === config.id);\n                if (existingIndex >= 0) {\n                    merged[existingIndex] = config;\n                } else {\n                    merged.push(config);\n                }\n            });\n            return merged;\n        } catch (error) {\n            console.error(\"Error parsing stored GPT configs:\", error);\n            return defaultGPTConfigs;\n        }\n    }\n    return defaultGPTConfigs;\n}\nfunction saveGPTConfigs(configs) {\n    if (true) {\n        return;\n    }\n    try {\n        localStorage.setItem(\"gpt-configs\", JSON.stringify(configs));\n    } catch (error) {\n        console.error(\"Error saving GPT configs:\", error);\n    }\n}\nfunction getGPTConfig(id) {\n    const configs = getGPTConfigs();\n    return configs.find((config)=>config.id === id);\n}\nfunction createGPTConfig(config) {\n    const id = config.name.toLowerCase().replace(/[^a-z0-9]+/g, \"-\");\n    const newConfig = {\n        ...config,\n        id\n    };\n    const configs = getGPTConfigs();\n    configs.push(newConfig);\n    saveGPTConfigs(configs);\n    return newConfig;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/gpt-configs.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase-knowledge-search.ts":
/*!******************************************!*\
  !*** ./lib/supabase-knowledge-search.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   indexKnowledgeBaseSupabase: () => (/* binding */ indexKnowledgeBaseSupabase),\n/* harmony export */   searchByCategory: () => (/* binding */ searchByCategory),\n/* harmony export */   searchKnowledgeBaseSupabase: () => (/* binding */ searchKnowledgeBaseSupabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _embeddings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./embeddings */ \"(rsc)/./lib/embeddings.ts\");\n\n\nconst supabaseUrl = \"https://kbnhjixaovdutgrzlfoh.supabase.co\";\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nlet supabase = null;\nfunction getSupabaseClient() {\n    if (!supabase && supabaseUrl && supabaseKey) {\n        try {\n            supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseKey);\n            console.log(\"✅ Supabase client initialized successfully\");\n        } catch (error) {\n            console.error(\"❌ Failed to initialize Supabase client:\", error);\n            return null;\n        }\n    }\n    return supabase;\n}\nasync function indexKnowledgeBaseSupabase(gptId, content, metadata) {\n    console.log(`📝 Indexing knowledge base for GPT: ${gptId}`);\n    const client = getSupabaseClient();\n    if (!client) {\n        console.error(\"❌ Supabase not configured, cannot index knowledge base\");\n        return false;\n    }\n    try {\n        // If content is provided, index it directly\n        if (content) {\n            console.log(`📄 Indexing content: ${content.substring(0, 100)}...`);\n            // Generate embedding for the content\n            let embedding = null;\n            try {\n                embedding = await (0,_embeddings__WEBPACK_IMPORTED_MODULE_0__.generateEmbedding)(content);\n                console.log(`✅ Generated embedding with ${embedding?.length || 0} dimensions`);\n            } catch (embeddingError) {\n                console.error(\"⚠️ Failed to generate embedding:\", embeddingError);\n            // Continue without embedding - we can still store the content\n            }\n            // Insert into knowledge_chunks table\n            const { data, error } = await client.from(\"knowledge_chunks\").insert({\n                gpt_id: gptId,\n                content: content,\n                embedding: embedding,\n                category: metadata?.category,\n                subcategory: metadata?.subcategory,\n                metadata: {\n                    filename: metadata?.filename || \"Manual Entry\",\n                    source: metadata?.source || \"direct\",\n                    uploadedAt: new Date().toISOString(),\n                    ...metadata\n                }\n            }).select();\n            if (error) {\n                console.error(\"❌ Failed to insert knowledge chunk:\", error);\n                return false;\n            }\n            console.log(`✅ Successfully indexed content for GPT: ${gptId}`);\n            return true;\n        }\n        // If no content provided, this might be a batch indexing operation\n        console.log(`✅ Indexing operation completed for GPT: ${gptId}`);\n        return true;\n    } catch (error) {\n        console.error(\"❌ Error indexing knowledge base:\", error);\n        return false;\n    }\n}\nasync function searchKnowledgeBaseSupabase(query, gptId, category, subcategory) {\n    console.log(`🔍 === KNOWLEDGE BASE SEARCH STARTING ===`);\n    console.log(`🔍 GPT ID: ${gptId}`);\n    console.log(`🔍 Query: \"${query}\"`);\n    if (category) console.log(`📂 Category filter: ${category}`);\n    if (subcategory) console.log(`📁 Subcategory filter: ${subcategory}`);\n    const client = getSupabaseClient();\n    if (!client) {\n        console.log(\"❌ Supabase not configured, skipping knowledge base search\");\n        return [];\n    }\n    try {\n        let supabaseQuery = client.from(\"knowledge_chunks\").select(\"id, gpt_id, category, subcategory, content, embedding, metadata, created_at\").ilike(\"gpt_id\", `%${gptId}%`);\n        if (category) {\n            supabaseQuery = supabaseQuery.eq(\"category\", category);\n        }\n        if (subcategory) {\n            supabaseQuery = supabaseQuery.eq(\"subcategory\", subcategory);\n        }\n        const { data: chunks, error } = await supabaseQuery;\n        if (error) {\n            console.error(\"❌ Supabase query error:\", error);\n            return [];\n        }\n        if (!chunks || chunks.length === 0) {\n            console.log(`❌ No knowledge chunks found for GPT: ${gptId}`);\n            if (category || subcategory) {\n                console.log(\"\\uD83D\\uDD04 Retrying without category filters...\");\n                return searchKnowledgeBaseSupabase(query, gptId);\n            }\n            return [];\n        }\n        console.log(`✅ Found ${chunks.length} total knowledge chunks for GPT: ${gptId}`);\n        // Log sample content for debugging\n        console.log(`📄 Sample chunks:`);\n        chunks.slice(0, 3).forEach((chunk, index)=>{\n            console.log(`   Chunk ${index + 1}:`);\n            console.log(`      Category: ${chunk.category || \"None\"}`);\n            console.log(`      Subcategory: ${chunk.subcategory || \"None\"}`);\n            console.log(`      Content preview: ${chunk.content?.substring(0, 100)}...`);\n            console.log(`      Has embedding: ${chunk.embedding ? \"Yes\" : \"No\"}`);\n            console.log(`      Source: ${chunk.metadata?.filename || chunk.metadata?.source || \"Unknown\"}`);\n        });\n        // Try vector search first if embeddings exist\n        const chunksWithEmbeddings = chunks.filter((chunk)=>chunk.embedding && Array.isArray(chunk.embedding) && chunk.embedding.length > 0);\n        if (chunksWithEmbeddings.length > 0) {\n            console.log(`🔍 Attempting vector search with ${chunksWithEmbeddings.length} chunks with embeddings`);\n            try {\n                const queryEmbedding = await (0,_embeddings__WEBPACK_IMPORTED_MODULE_0__.generateEmbedding)(query);\n                if (queryEmbedding && queryEmbedding.length > 0) {\n                    const vectorResults = await performVectorSearch(client, gptId, queryEmbedding, category, subcategory);\n                    if (vectorResults.length > 0) {\n                        console.log(`✅ Vector search found ${vectorResults.length} results`);\n                        return vectorResults;\n                    }\n                }\n            } catch (embeddingError) {\n                console.error(\"⚠️ Vector search failed, falling back to text search:\", embeddingError);\n            }\n        } else {\n            console.log(`ℹ️ No chunks with embeddings found, using text search`);\n        }\n        console.log(\"\\uD83D\\uDD0D Performing enhanced text search\");\n        return performEnhancedTextSearch(chunks, query);\n    } catch (error) {\n        console.error(\"❌ Knowledge base search error:\", error);\n        return [];\n    }\n}\nasync function performVectorSearch(client, gptId, queryEmbedding, category, subcategory) {\n    try {\n        const rpcQuery = client.rpc(\"match_knowledge_chunks\", {\n            query_embedding: queryEmbedding,\n            gpt_id_param: gptId,\n            match_threshold: 0.5,\n            match_count: 10\n        });\n        const { data: matches, error } = await rpcQuery;\n        if (error) {\n            console.error(\"❌ Vector search RPC error:\", error);\n            return [];\n        }\n        if (!matches || matches.length === 0) {\n            console.log(\"❌ No vector search matches found\");\n            return [];\n        }\n        // Filter by category/subcategory if specified\n        let filteredMatches = matches;\n        if (category) {\n            filteredMatches = filteredMatches.filter((match)=>match.category === category);\n        }\n        if (subcategory) {\n            filteredMatches = filteredMatches.filter((match)=>match.subcategory === subcategory);\n        }\n        console.log(`✅ Vector search found ${filteredMatches.length} relevant matches`);\n        return filteredMatches.map((match)=>({\n                content: match.content || \"\",\n                similarity: Math.round((match.similarity || 0) * 100),\n                source: match.metadata?.filename || \"Unknown source\",\n                category: match.category,\n                subcategory: match.subcategory\n            }));\n    } catch (error) {\n        console.error(\"❌ Vector search error:\", error);\n        return [];\n    }\n}\nfunction performEnhancedTextSearch(chunks, query) {\n    console.log(\"\\uD83D\\uDD0D === ENHANCED TEXT SEARCH ===\");\n    console.log(`🔍 Searching ${chunks.length} chunks for: \"${query}\"`);\n    const queryLower = query.toLowerCase().trim();\n    const searchTerms = queryLower.split(/\\s+/).filter((term)=>term.length > 0).map((term)=>term.replace(/[^\\w]/g, \"\")) // Remove punctuation\n    .filter((term)=>term.length > 0)// Remove common question words but keep important terms\n    .filter((term)=>![\n            \"what\",\n            \"when\",\n            \"where\",\n            \"who\",\n            \"why\",\n            \"how\",\n            \"is\",\n            \"are\",\n            \"the\",\n            \"a\",\n            \"an\",\n            \"does\",\n            \"do\"\n        ].includes(term));\n    console.log(`🔍 Search terms extracted: [${searchTerms.join(\", \")}]`);\n    const scoredChunks = chunks.map((chunk)=>{\n        const content = (chunk.content || \"\").toLowerCase();\n        const metadataStr = JSON.stringify(chunk.metadata || {}).toLowerCase();\n        const category = (chunk.category || \"\").toLowerCase();\n        const subcategory = (chunk.subcategory || \"\").toLowerCase();\n        const source = (chunk.metadata?.filename || chunk.metadata?.source || \"\").toLowerCase();\n        let score = 0;\n        const matchDetails = [];\n        if (content.includes(queryLower)) {\n            score += 300;\n            matchDetails.push(`EXACT_PHRASE`);\n            console.log(`   ✅ EXACT PHRASE MATCH in content (+300)`);\n        }\n        if (metadataStr.includes(queryLower)) {\n            score += 200;\n            matchDetails.push(`EXACT_IN_METADATA`);\n            console.log(`   ✅ EXACT PHRASE MATCH in metadata (+200)`);\n        }\n        searchTerms.forEach((term)=>{\n            // Content matches - 100 points per occurrence\n            const contentMatches = (content.match(new RegExp(`\\\\b${term}\\\\b`, \"gi\")) || []).length;\n            if (contentMatches > 0) {\n                const termScore = contentMatches * 100;\n                score += termScore;\n                matchDetails.push(`${term}:content(${contentMatches})`);\n                console.log(`   ✅ Term \"${term}\" found ${contentMatches}x in content (+${termScore})`);\n            }\n            // Metadata matches - 80 points per occurrence\n            const metadataMatches = (metadataStr.match(new RegExp(`\\\\b${term}\\\\b`, \"gi\")) || []).length;\n            if (metadataMatches > 0) {\n                const termScore = metadataMatches * 80;\n                score += termScore;\n                matchDetails.push(`${term}:metadata(${metadataMatches})`);\n                console.log(`   ✅ Term \"${term}\" found ${metadataMatches}x in metadata (+${termScore})`);\n            }\n            // Source/filename matches - 60 points\n            if (source.includes(term)) {\n                score += 60;\n                matchDetails.push(`${term}:source`);\n                console.log(`   ✅ Term \"${term}\" found in source (+60)`);\n            }\n            // Category matches - 50 points\n            if (category.includes(term)) {\n                score += 50;\n                matchDetails.push(`${term}:category`);\n                console.log(`   ✅ Term \"${term}\" found in category (+50)`);\n            }\n            // Subcategory matches - 40 points\n            if (subcategory.includes(term)) {\n                score += 40;\n                matchDetails.push(`${term}:subcategory`);\n                console.log(`   ✅ Term \"${term}\" found in subcategory (+40)`);\n            }\n        });\n        searchTerms.forEach((term)=>{\n            if (term.length <= 5) {\n                // Short terms like \"CRM\", \"API\", \"rep\", etc.\n                const partialMatches = (content.match(new RegExp(term, \"gi\")) || []).length;\n                if (partialMatches > 0) {\n                    const partialScore = partialMatches * 50;\n                    score += partialScore;\n                    matchDetails.push(`${term}:partial(${partialMatches})`);\n                    console.log(`   ✅ Partial match for \"${term}\" found ${partialMatches}x (+${partialScore})`);\n                }\n            }\n        });\n        const questionPatterns = [\n            {\n                pattern: /what.*purpose|purpose.*ai|ai.*assistant/i,\n                keywords: [\n                    \"purpose\",\n                    \"ai\",\n                    \"assistant\",\n                    \"goal\",\n                    \"objective\"\n                ]\n            },\n            {\n                pattern: /what.*crm|crm.*use|crm.*system/i,\n                keywords: [\n                    \"crm\",\n                    \"buildertrend\",\n                    \"customer\",\n                    \"management\",\n                    \"system\"\n                ]\n            },\n            {\n                pattern: /after.*contract|contract.*signed|post.*contract/i,\n                keywords: [\n                    \"contract\",\n                    \"signed\",\n                    \"after\",\n                    \"next\",\n                    \"steps\",\n                    \"process\"\n                ]\n            },\n            {\n                pattern: /outside.*service.*area|service.*area.*outside/i,\n                keywords: [\n                    \"service\",\n                    \"area\",\n                    \"outside\",\n                    \"territory\",\n                    \"region\"\n                ]\n            },\n            {\n                pattern: /what.*rep.*do|rep.*should/i,\n                keywords: [\n                    \"rep\",\n                    \"representative\",\n                    \"should\",\n                    \"do\",\n                    \"action\"\n                ]\n            }\n        ];\n        questionPatterns.forEach(({ pattern, keywords })=>{\n            if (pattern.test(queryLower)) {\n                keywords.forEach((keyword)=>{\n                    if (content.includes(keyword)) {\n                        score += 75;\n                        matchDetails.push(`semantic:${keyword}`);\n                        console.log(`   ✅ Semantic match for \"${keyword}\" (+75)`);\n                    }\n                });\n            }\n        });\n        // 4. BONUS POINTS\n        // Has category - 15 points\n        if (chunk.category) {\n            score += 15;\n            matchDetails.push(`has_category`);\n        }\n        // Has metadata - 10 points\n        if (chunk.metadata && Object.keys(chunk.metadata).length > 0) {\n            score += 10;\n            matchDetails.push(`has_metadata`);\n        }\n        // Log scoring details for chunks with any matches\n        if (score > 0) {\n            console.log(`📊 Chunk scored ${score} points:`);\n            console.log(`   Content: \"${chunk.content?.substring(0, 150)}...\"`);\n            console.log(`   Source: ${chunk.metadata?.filename || chunk.metadata?.source || \"Unknown\"}`);\n            console.log(`   Category: ${chunk.category || \"None\"}`);\n            console.log(`   Matches: ${matchDetails.join(\", \")}`);\n        }\n        return {\n            chunk,\n            score,\n            matchDetails\n        };\n    });\n    const relevantChunks = scoredChunks.filter((item)=>item.score >= 5).sort((a, b)=>b.score - a.score).slice(0, 15);\n    console.log(`✅ Found ${relevantChunks.length} relevant chunks via text search`);\n    if (relevantChunks.length > 0) {\n        console.log(`📊 Top results:`);\n        relevantChunks.slice(0, 10).forEach((item, index)=>{\n            console.log(`   ${index + 1}. Score: ${item.score}, Source: ${item.chunk.metadata?.filename || \"Unknown\"}`);\n        });\n    } else {\n        console.log(`⚠️ No chunks met the minimum score threshold of 5 points`);\n    }\n    return relevantChunks.map((item)=>{\n        const normalizedScore = Math.min(Math.max(Math.round(item.score / 300 * 100), 35), 100);\n        return {\n            content: item.chunk.content || \"\",\n            similarity: normalizedScore,\n            source: item.chunk.metadata?.filename || item.chunk.metadata?.source || \"Unknown source\",\n            category: item.chunk.category,\n            subcategory: item.chunk.subcategory,\n            metadata: item.chunk.metadata\n        };\n    });\n}\n// Helper function to search by category\nasync function searchByCategory(gptId, category, subcategory) {\n    console.log(`🔍 Searching by category: ${category}${subcategory ? ` > ${subcategory}` : \"\"}`);\n    const client = getSupabaseClient();\n    if (!client) return [];\n    try {\n        let query = client.from(\"knowledge_chunks\").select(\"id, gpt_id, category, subcategory, content, metadata, created_at\").eq(\"gpt_id\", gptId).eq(\"category\", category);\n        if (subcategory) {\n            query = query.eq(\"subcategory\", subcategory);\n        }\n        const { data: chunks, error } = await query;\n        if (error || !chunks) {\n            console.error(\"❌ Category search error:\", error);\n            return [];\n        }\n        console.log(`✅ Found ${chunks.length} chunks in category: ${category}`);\n        return chunks.map((chunk)=>({\n                content: chunk.content || \"\",\n                similarity: 100,\n                source: chunk.metadata?.filename || chunk.metadata?.source || \"Unknown source\",\n                category: chunk.category,\n                subcategory: chunk.subcategory,\n                metadata: chunk.metadata\n            }));\n    } catch (error) {\n        console.error(\"❌ Category search error:\", error);\n        return [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase-knowledge-search.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry","vendor-chunks/@supabase","vendor-chunks/whatwg-url","vendor-chunks/tr46","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2Fhome%2Fproject%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fproject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();